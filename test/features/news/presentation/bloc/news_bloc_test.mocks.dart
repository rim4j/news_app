// Mocks generated by Mockito 5.4.2 from annotations
// in news_app/test/features/news/presentation/bloc/news_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:news_app/common/resources/data_state.dart' as _i3;
import 'package:news_app/features/news/domain/entities/article_entity.dart'
    as _i6;
import 'package:news_app/features/news/domain/repositories/article_repository.dart'
    as _i2;
import 'package:news_app/features/news/domain/usecases/bookmark_article_usecase.dart'
    as _i8;
import 'package:news_app/features/news/domain/usecases/delete_bookmark_article_usecase.dart'
    as _i10;
import 'package:news_app/features/news/domain/usecases/find_bookmark_article_usecase.dart'
    as _i9;
import 'package:news_app/features/news/domain/usecases/get_articles_usecase.dart'
    as _i4;
import 'package:news_app/features/news/domain/usecases/get_bookmark_articles_usecase.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeArticleRepository_0 extends _i1.SmartFake
    implements _i2.ArticleRepository {
  _FakeArticleRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataState_1<T> extends _i1.SmartFake implements _i3.DataState<T> {
  _FakeDataState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetArticlesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetArticlesUseCase extends _i1.Mock
    implements _i4.GetArticlesUseCase {
  MockGetArticlesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ArticleRepository get articleRepository => (super.noSuchMethod(
        Invocation.getter(#articleRepository),
        returnValue: _FakeArticleRepository_0(
          this,
          Invocation.getter(#articleRepository),
        ),
      ) as _i2.ArticleRepository);
  @override
  _i5.Future<_i3.DataState<List<_i6.ArticleEntity>>> call({dynamic params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i5.Future<_i3.DataState<List<_i6.ArticleEntity>>>.value(
            _FakeDataState_1<List<_i6.ArticleEntity>>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i5.Future<_i3.DataState<List<_i6.ArticleEntity>>>);
}

/// A class which mocks [GetBookmarkArticlesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetBookmarkArticlesUseCase extends _i1.Mock
    implements _i7.GetBookmarkArticlesUseCase {
  MockGetBookmarkArticlesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ArticleRepository get articleRepository => (super.noSuchMethod(
        Invocation.getter(#articleRepository),
        returnValue: _FakeArticleRepository_0(
          this,
          Invocation.getter(#articleRepository),
        ),
      ) as _i2.ArticleRepository);
  @override
  _i5.Future<_i3.DataState<List<_i6.ArticleEntity>>> call({dynamic params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i5.Future<_i3.DataState<List<_i6.ArticleEntity>>>.value(
            _FakeDataState_1<List<_i6.ArticleEntity>>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i5.Future<_i3.DataState<List<_i6.ArticleEntity>>>);
}

/// A class which mocks [BookmarkArticleUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookmarkArticleUseCase extends _i1.Mock
    implements _i8.BookmarkArticleUseCase {
  MockBookmarkArticleUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ArticleRepository get articleRepository => (super.noSuchMethod(
        Invocation.getter(#articleRepository),
        returnValue: _FakeArticleRepository_0(
          this,
          Invocation.getter(#articleRepository),
        ),
      ) as _i2.ArticleRepository);
  @override
  _i5.Future<dynamic> call({_i6.ArticleEntity? params}) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
}

/// A class which mocks [FindBookmarkArticleUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFindBookmarkArticleUseCase extends _i1.Mock
    implements _i9.FindBookmarkArticleUseCase {
  MockFindBookmarkArticleUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ArticleRepository get articleRepository => (super.noSuchMethod(
        Invocation.getter(#articleRepository),
        returnValue: _FakeArticleRepository_0(
          this,
          Invocation.getter(#articleRepository),
        ),
      ) as _i2.ArticleRepository);
  @override
  _i5.Future<_i3.DataState<bool>> call({String? params}) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i5.Future<_i3.DataState<bool>>.value(_FakeDataState_1<bool>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i5.Future<_i3.DataState<bool>>);
}

/// A class which mocks [DeleteBookmarkArticleUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteBookmarkArticleUseCase extends _i1.Mock
    implements _i10.DeleteBookmarkArticleUseCase {
  MockDeleteBookmarkArticleUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ArticleRepository get articleRepository => (super.noSuchMethod(
        Invocation.getter(#articleRepository),
        returnValue: _FakeArticleRepository_0(
          this,
          Invocation.getter(#articleRepository),
        ),
      ) as _i2.ArticleRepository);
  @override
  _i5.Future<void> call({String? params}) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
